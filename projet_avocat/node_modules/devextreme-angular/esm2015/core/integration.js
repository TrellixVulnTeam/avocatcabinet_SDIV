/*!
 * devextreme-angular
 * Version: 19.2.13
 * Build date: Fri Dec 03 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, NgZone, Optional } from '@angular/core';
import { XhrFactory } from '@angular/common/http';
import * as httpRequest from 'devextreme/core/http_request';
import { DOCUMENT } from '@angular/common';
import * as domAdapter from 'devextreme/core/dom_adapter';
import * as readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import * as eventsEngine from 'devextreme/events/core/events_engine';
const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
let originalAdd;
let callbacks = [];
readyCallbacks.inject({
    add: function (callback) {
        originalAdd = this.callBase.bind(this);
        callbacks.push(callback);
    }
});
let doInjections = (document, ngZone, xhrFactory) => {
    domAdapter.inject({
        _document: document,
        listen: function (...args) {
            const eventName = args[1];
            if (outsideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.runOutsideAngular(() => {
                    return this.callBase.apply(this, args);
                });
            }
            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.run(() => {
                    return this.callBase.apply(this, args);
                });
            }
            return this.callBase.apply(this, args);
        },
        isElementNode: function (element) {
            return element && element.nodeType === 1;
        },
        isTextNode: function (element) {
            return element && element.nodeType === 3;
        },
        isDocument: function (element) {
            return element && element.nodeType === 9;
        }
    });
    httpRequest.inject({
        getXhr: function () {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            let _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr['withCredentials'] = false;
            }
            return _xhr;
        }
    });
    const runReadyCallbacksInZone = () => {
        ngZone.run(() => {
            eventsEngine.set({});
            callbacks.forEach(callback => originalAdd.call(null, callback));
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    doInjections = runReadyCallbacksInZone;
};
const ɵ0 = doInjections;
let DxIntegrationModule = class DxIntegrationModule {
    constructor(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
};
DxIntegrationModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone },
    { type: XhrFactory, decorators: [{ type: Optional }] }
];
DxIntegrationModule = tslib_1.__decorate([
    NgModule({}),
    tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(2, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object, NgZone, XhrFactory])
], DxIntegrationModule);
export { DxIntegrationModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,